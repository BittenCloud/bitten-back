name: Deploy BitBack Application

on:
  push:
    branches:
      - master

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read      # for checkout
      packages: write    # for Push in GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Convert owner and repo name to lowercase
        id: set_names
        run: |
          echo "LOWER_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "LOWER_REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.LOWER_OWNER }}/${{ env.LOWER_REPO_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.LOWER_OWNER }}/${{ env.LOWER_REPO_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    name: Deploy to Production Server
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert owner and repo name to lowercase for deployment
        id: set_deploy_names
        run: |
          echo "LOWER_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "LOWER_REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /opt/bitback"

      - name: Copy deployment files to server
        run: |
          scp ./docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/bitback/docker-compose.prod.yml
          scp ./nginx.prod.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/bitback/nginx.prod.conf

      - name: Deploy application on server

        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

        run: |
          
          LOCAL_APP_IMAGE_NAME_WITH_TAG="ghcr.io/${{ env.LOWER_OWNER }}/${{ env.LOWER_REPO_NAME }}:${{ github.sha }}"
          
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
            cd /opt/bitback/
          
          
            export DB_USER="${DB_USER}"
            export DB_PASSWORD="${DB_PASSWORD}"
            export DB_NAME="${DB_NAME}"
            export POSTGRES_USER="${POSTGRES_USER}"
            export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
          
            # Экспортируем полное имя образа, которое мы сформировали локально на runner'е
            export APP_IMAGE_NAME_WITH_TAG="${LOCAL_APP_IMAGE_NAME_WITH_TAG}"
          
            echo "Pulling new image: \${APP_IMAGE_NAME_WITH_TAG}" # Используем \${...} для вывода значения с сервера
            docker pull "\${APP_IMAGE_NAME_WITH_TAG}" # Переменная будет подставлена на сервере
          
            echo "Starting docker-compose..."
            # Уберем warning про версию, это не критично, но можно удалить 'version: "3.8"' из docker-compose.prod.yml
            docker compose -f docker-compose.prod.yml config # Можно добавить для проверки конфигурации на сервере
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
          
            echo "Cleaning up old docker images..."
            docker image prune -af
          EOF
name: Deploy BitBack Application

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read      # For checkout
      packages: write    # For push to GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: . # Project root, where Dockerfile is located
          file: ./Dockerfile # Path to Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}, ${{ env.IMAGE_NAME }}:latest # Tag with commit hash and latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-server:
    name: Deploy to Production Server
    needs: build-and-push-image # Runs after successful image build and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # To get docker-compose.prod.yml and nginx.prod.conf

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p /opt/bitback"

      - name: Copy deployment files to server
        run: |
          scp ./docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/bitback/docker-compose.prod.yml
          scp ./nginx.prod.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/bitback/nginx.prod.conf

      - name: Deploy application on server
        env:
          # Secrets for the database
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          # Variable with the full image name and tag for docker-compose
          APP_IMAGE_NAME_WITH_TAG: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /opt/bitback/

            # Export environment variables for docker-compose to use
            export DB_USER="${DB_USER}"
            export DB_PASSWORD="${DB_PASSWORD}"
            export DB_NAME="${DB_NAME}"
            export POSTGRES_USER="${POSTGRES_USER}"
            export POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
            export APP_IMAGE_NAME_WITH_TAG="${APP_IMAGE_NAME_WITH_TAG}"

            echo "Pulling new image: ${APP_IMAGE_NAME_WITH_TAG}"

            docker pull ${APP_IMAGE_NAME_WITH_TAG}

            echo "Starting docker-compose..."

            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "Cleaning up old docker images..."
            docker image prune -af
          EOF